#include <math.h>
#include "float.h"
#include <stdlib.h>
#include "s21_math.h"


#test SIN
double num = 0.55;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN1
double num = 1;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN2
double num = -1;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN3
double num = 0.999999;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN4
double num = -0.999999;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN5
double num = NAN;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN6
double num = INFINITY;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN7
double num = -INFINITY;
long double orig_res = sin(num), our_res = s21_sin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SIN8
double x = 0;
ck_assert_double_eq_tol(s21_sin(x), sinl(x), 1e-06);

#test SIN9
ck_assert_ldouble_nan(s21_sin(-INFINITY));
ck_assert_ldouble_nan(sinl(-INFINITY));

#test SIN10
ck_assert_ldouble_nan(s21_sin(INFINITY));
ck_assert_ldouble_nan(sinl(INFINITY));

#test SIN11
ck_assert_ldouble_nan(s21_sin(NAN));
ck_assert_ldouble_nan(sinl(NAN));

#test SIN12
ck_assert_double_eq_tol(s21_sin(0.0), sinl(0.0), 1e-06);

#test SIN13
ck_assert_double_eq_tol(s21_sin(M_PI / 6), sinl(M_PI / 6), 1e-06);

#test SIN14
ck_assert_double_eq_tol(s21_sin(M_PI / 4), sinl(M_PI / 4), 1e-06);

#test SIN15
ck_assert_double_eq_tol(s21_sin(M_PI / 3), sinl(M_PI / 3), 1e-06);

#test SIN16
ck_assert_double_eq_tol(s21_sin(M_PI / 2), sin(M_PI / 2), 1e-06);

#test SIN17
ck_assert_double_eq_tol(s21_sin(3 * M_PI / 2), sin(3 * M_PI / 2), 1e-06);

#test SIN18
ck_assert_double_eq_tol(s21_sin(2 * M_PI), sin(2 * M_PI), 1e-06);

#test SIN19
ck_assert_double_eq_tol(s21_sin(-2 * M_PI), sin(-2 * M_PI), 1e-06);

#test SIN20
ck_assert_double_eq_tol(s21_sin(-3 * M_PI), sin(-3 * M_PI), 1e-06);

#test SIN21
ck_assert_double_eq_tol(s21_sin(174.532925199433), sinl(174.532925199433),
                        1e-06);

#test SIN22
ck_assert_double_eq_tol(s21_sin(-174.532925199433), sinl(-174.532925199433),
1e-06);

#test SIN23
ck_assert_double_eq_tol(s21_sin(-M_PI), sinl(-M_PI), 1e-06);

#test SIN24
int num = 27;
ck_assert_double_eq_tol(s21_sin(num), sinl(num),
                        1e-06);
#test SIN25
ck_assert_double_eq_tol(s21_sin(M_PI), sinl(M_PI), 1e-06);

#test SIN26
ck_assert_double_eq_tol(s21_sin(M_PI), sin(M_PI), 1e-06);


// COS-------------COS-------------------COS-----------------------COS----------------------COS---------------
#test COS
double num = 0.55;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS1
double num = -0.999999;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS2
double num = 628;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS3
ck_assert_float_eq(s21_cos(0), cos(0));

#test COS4
ck_assert_float_eq(s21_cos(-1), cos(-1));

#test COS5
double num = NAN;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS6
double num = INFINITY;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS7
double num = -INFINITY;
long double orig_res = cos(num), our_res = s21_cos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test COS8
double x = 0;
ck_assert_double_eq_tol(s21_cos(x), cosl(x), 1e-06);

#test COS9
ck_assert_ldouble_nan(s21_cos(-INFINITY));
ck_assert_ldouble_nan(cosl(-INFINITY));

#test COS10
ck_assert_ldouble_nan(s21_cos(INFINITY));
ck_assert_ldouble_nan(cosl(INFINITY));

#test COS11
ck_assert_ldouble_nan(s21_cos(NAN));
ck_assert_ldouble_nan(cosl(NAN));

#test COS12
ck_assert_double_eq_tol(s21_cos(0.0), cosl(0.0), 1e-06);

#test COS13
ck_assert_double_eq_tol(s21_cos(M_PI / 4), cosl(M_PI / 4), 1e-06);

#test COS14
ck_assert_double_eq_tol(s21_cos(M_PI / 6), cosl(M_PI / 6), 1e-06);

#test COS15
ck_assert_double_eq_tol(s21_cos(M_PI / 3), cosl(M_PI / 3), 1e-06);

#test COS16
ck_assert_double_eq_tol(s21_cos(M_PI / 2), cos(M_PI / 2), 1e-06);

#test COS17
ck_assert_double_eq_tol(s21_cos(3 * M_PI / 2), cosl(3 * M_PI / 2), 1e-06);

#test COS18
ck_assert_double_eq_tol(s21_cos(2 * M_PI), cosl(2 * M_PI), 1e-06);

#test COS19
ck_assert_double_eq_tol(s21_cos(174.532925199433), cosl(174.532925199433),
                          1e-06);
#test COS20
ck_assert_double_eq_tol(s21_cos(-174.532925199433), cosl(-174.532925199433),
                          1e-06);
#test COS21
ck_assert_double_eq_tol(s21_cos(5 * M_PI / 2), cos(5 * M_PI / 2), 1e-06);

#test COS22
ck_assert_double_eq_tol(s21_cos(M_PI / 2), cos(M_PI / 2), 1e-06);

#test COS23
ck_assert_double_eq_tol(s21_cos(-133), cos(-133), 1e-06);



// ----TAN--------------------TAN---------------------TAN---------------------TAN--------------------TAN----
#test TAN0
double num = 0.55;
long double orig_res = tan(num), our_res = s21_tan(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test TAN1
  double num = NAN;
  long double orig_res = tan(num), our_res = s21_tan(num);
  int suc = 0;
  if (isnan(orig_res) && isnan(our_res)) suc = 1;
  ck_assert_int_eq(1, suc);

#test TAN2
  double num = INFINITY;
  long double orig_res = tan(num), our_res = s21_tan(num);
  int suc = 0;
  if (isnan(orig_res) && isnan(our_res)) suc = 1;
  ck_assert_int_eq(1, suc);

#test TAN3
  double num = -INFINITY;
  long double orig_res = tan(num), our_res = s21_tan(num);
  int suc = 0;
  if (isnan(orig_res) && isnan(our_res)) suc = 1;
  ck_assert_int_eq(1, suc);

#test TAN4
 double x = 0;
  ck_assert_double_eq_tol(s21_tan(x), tanl(x), 1e-06);

#test TAN5
  ck_assert_ldouble_nan(s21_tan(-INFINITY));
  ck_assert_ldouble_nan(tanl(-INFINITY));

#test TAN6
  ck_assert_ldouble_nan(s21_tan(INFINITY));
  ck_assert_ldouble_nan(tanl(INFINITY));

#test TAN7
  ck_assert_ldouble_nan(s21_tan(NAN));
  ck_assert_ldouble_nan(tanl(NAN));

#test TAN8
ck_assert_double_eq_tol(s21_tan(0.0), tanl(0.0), 1e-06);

#test TAN9
ck_assert_double_eq_tol(s21_tan(M_PI / 6), tanl(M_PI / 6), 1e-06);

#test TAN10
ck_assert_double_eq_tol(s21_tan(M_PI / 4), tanl(M_PI / 4), 1e-06);

#test TAN11
ck_assert_double_eq_tol(s21_tan(-2 * M_PI), tanl(-2 * M_PI), 1e-06);

#test TAN12
ck_assert_double_eq_tol(s21_tan(M_PI), tanl(M_PI), 1e-06);

#test TAN13
ck_assert_double_eq_tol(s21_tan(M_PI / 3), tanl(M_PI / 3), 1e-06);

#test TAN14
ck_assert_double_eq_tol(s21_tan(3 * M_PI / 3), tanl(3 * M_PI / 3), 1e-06);

#test TAN15
ck_assert_double_eq_tol(s21_tan(174.532925199433), tanl(174.532925199433),
                          1e-06);

#test TAN16
ck_assert_double_eq_tol(s21_tan(-174.532925199433), tanl(-174.532925199433),
                          1e-06);

#test TAN17
ck_assert_double_eq_tol(s21_tan(M_PI / 2), tan(M_PI / 2), 1e-06);

#test TAN18
ck_assert_double_eq_tol(s21_tan(-M_PI / 2), tanl(-M_PI / 2), 1e-06);

#test TAN20
ck_assert_double_eq_tol(s21_tan(M_PI / 2), tanl(M_PI / 2), 1e-06);

// -----------LOG-----------------------LOG------------------LOG-------------------LOG-------------------LOG---------------
#test LOG0
double num = 456.789;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG1
double num = NAN;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if (isnan(our_res) && isnan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG2
double num = 0.001;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG3
double num = 0.4;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG4
double num = -INFINITY;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if (isnan(our_res) && isnan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG5
double num = INFINITY;
long double orig_res = log(num);
long double our_res = s21_log(num);
int suc = 0;
if (isinf(our_res) && isinf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test LOG6
ck_assert_ldouble_infinite(s21_log(INFINITY));
ck_assert_ldouble_infinite(log(INFINITY));

ck_assert_ldouble_nan(s21_log(-INFINITY));
ck_assert_ldouble_nan(log(-INFINITY));

#test LOG7
ck_assert_ldouble_nan(s21_log(NAN));
ck_assert_ldouble_nan(log(NAN));

#test LOG8
ck_assert_ldouble_eq_tol(s21_log(1.0), log(1.0), 1e-6);
ck_assert_ldouble_eq_tol(s21_log(1.1), log(1.1), 1e-6);

#test LOG9
ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);

#test LOG10
ck_assert_ldouble_eq_tol(s21_log(1), log(1), 1e-6);

#test LOG11
ck_assert_ldouble_eq_tol(s21_log(100), log(100), 1e-6);

#test LOG12
ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);

#test LOG13
ck_assert_ldouble_eq_tol(s21_log(0.5), log(0.5), 1e-6);

#test LOG14
ck_assert_ldouble_eq_tol(s21_log(S21_DBL_MAX), log(S21_DBL_MAX), 1e-6);

#test LOG14_1
ck_assert_ldouble_eq_tol(s21_log(17976931348623158.0), log(17976931348623158.0), 1e-6);

#test LOG15
ck_assert_ldouble_eq_tol(s21_log(M_PI / 3), log(M_PI / 3), 1e-6);

#test LOG16
ck_assert_ldouble_eq_tol(s21_log(9.234578353457e-6), log(9.234578353457e-6),
1e-6);

#test LOG17
ck_assert_ldouble_eq_tol(s21_log(9.234578353457e6), log(9.234578353457e6),
1e-6);

#test LOG18
ck_assert_ldouble_eq_tol(s21_log(1234567.000000004), log(1234567.000000004),
1e-6);

#test LOG19
ck_assert_ldouble_eq_tol(s21_log(1.1e-16), log(1.1e-16), 1e-6);

#test LOG20
ck_assert_ldouble_eq_tol(s21_log(1.1e-45), log(1.1e-45), 1e-6);

#test LOG21
ck_assert_ldouble_eq_tol(s21_log(1.1e-18), log(1.1e-18), 1e-6);

#test LOG22
ck_assert_ldouble_eq_tol(s21_log(1.1e-19), log(1.1e-19), 1e-6);

#test LOG23
ck_assert_ldouble_eq_tol(s21_log(1.1e-23), log(1.1e-23), 1e-6);

#test LOG24
ck_assert_ldouble_eq_tol(s21_log(987654321123.123e-30),
                        log(987654321123.123e-30), 1e-6);

#test LOG25
ck_assert_ldouble_eq_tol(s21_log(98765.123e-11), log(98765.123e-11), 1e-6);

#test LOG26
ck_assert_ldouble_infinite(s21_log(0));
ck_assert_ldouble_infinite(log(0));

#test LOG27
ck_assert_ldouble_eq_tol(s21_log(1.1e-17), log(1.1e-17), 1e-6);

#test LOG28
ck_assert_ldouble_eq_tol(s21_log(1.1e-15), log(1.1e-15), 1e-6);

#test LOG29
ck_assert_ldouble_eq_tol(s21_log(1.1e-14), log(1.1e-14), 1e-6);

#test LOG30
ck_assert_ldouble_eq_tol(s21_log(1.1e-13), log(1.1e-13), 1e-6);

#test LOG31
ck_assert_ldouble_eq_tol(s21_log(1.1e-12), log(1.1e-12), 1e-6);

#test LOG32
ck_assert_ldouble_eq_tol(s21_log(1.1e-11), log(1.1e-11), 1e-6);

#test LOG33
ck_assert_ldouble_eq_tol(s21_log(1.1e-80), log(1.1e-80), 1e-6);

// ------ABS----------------------ABS---------------------ABS-------------------ABS---------------------ABS
#test ABS0
ck_assert_int_eq(s21_abs(21), abs(21));

#test ABS1
ck_assert_int_eq(s21_abs(-21), abs(-21));

#test ABS2
ck_assert_int_eq(s21_abs(-2147483647), abs(-2147483647));

#test ABS3
ck_assert_int_eq(s21_abs(2147483647), abs(2147483647));

#test ABS4
ck_assert_int_eq(s21_abs(-0), abs(-0));

#test ABS5
ck_assert_int_eq(s21_abs(+0), abs(+0));

#test ABS6
ck_assert_int_eq(s21_abs((int)NAN), abs((int)NAN));

#test ABS7
ck_assert_int_eq(s21_abs((int)INFINITY), abs((int)INFINITY));

#test ABS8
ck_assert_int_eq(s21_abs((int)-INFINITY), abs((int)-INFINITY));

#test ABS9
ck_assert_int_eq(s21_abs(0), abs(0));

// ----------FABS---------------------------FABS----------------------FABS--------------------FABS-------------------FABS
#test FABS0
ck_assert_ldouble_eq(s21_fabs(0.000001), fabs(0.000001));

#test FABS1
ck_assert_ldouble_eq(s21_fabs(-21.000345), fabs(-21.000345));

#test FABS2
ck_assert_ldouble_eq(s21_fabs(-2147483600.543), fabs(-2147483600.543));

#test FABS3
ck_assert_ldouble_eq(s21_fabs(2147483600.4857), fabs(2147483600.4857));

#test FABS4
double a = -5.53151413431;
ck_assert_ldouble_eq(s21_fabs(a), fabs(a));

#test FABS5
double a = NAN;
ck_assert_ldouble_nan(s21_fabs(a));
ck_assert_ldouble_nan(fabs(a));

#test FABS6
double a = S21_INF;
ck_assert_ldouble_infinite(s21_fabs(a));
ck_assert_ldouble_infinite(fabs(a));

#test FABS7
double a = -9519359135915.53151413431;
ck_assert_ldouble_eq_tol(s21_fabs(a), fabs(a), S21_EPS);

#test FABS8
ck_assert_ldouble_nan(s21_fabs(NAN));
ck_assert_ldouble_nan(fabs(NAN));

#test FABS9
ck_assert_ldouble_eq(s21_fabs(-15.01), fabs(-15.01));

#test FABS10
ck_assert_ldouble_eq(s21_fabs(15.01), fabs(15.01));

#test FABS11
ck_assert_ldouble_eq(s21_fabs(INFINITY), fabs(INFINITY));

#test FABS12
ck_assert_ldouble_eq(s21_fabs(-INFINITY), fabs(-INFINITY));

#test FABS13
double num = NAN;
long double orig_res = fabs(num), our_res = s21_fabs(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

// ---------------SQRT--------------------------SQRT--------------------SQRT----------------------SQRT---------------------SQRT-
#test SQRT0
double num = INFINITY;
long double orig_res = sqrt(num), our_res = s21_sqrt(num);
int suc = 0;
if (isinf(orig_res) && isinf(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SQRT1
double num = -INFINITY;
long double orig_res = sqrt(num), our_res = s21_sqrt(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SQRT2
double num = -15.01;
ck_assert_ldouble_nan(s21_sqrt(num));
ck_assert_ldouble_nan(sqrt(num));

#test SQRT3
double num = 0.9999;
long double orig_res = sqrt(num), our_res = s21_sqrt(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test SQRT4
double num = NAN;
long double orig_res = sqrt(num), our_res = s21_sqrt(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test SQRT5
ck_assert_ldouble_infinite(s21_sqrt(INFINITY));
ck_assert_ldouble_infinite(sqrt(INFINITY));

#test SQRT6
ck_assert_ldouble_nan(s21_sqrt(NAN));
ck_assert_ldouble_nan(sqrt(NAN));

#test SQRT7
ck_assert_ldouble_eq_tol(s21_sqrt(1.0), sqrt(1.0), 1e-6);
ck_assert_ldouble_eq_tol(s21_sqrt(1.1), sqrt(1.1), 1e-6);

#test SQRT8
ck_assert_ldouble_eq_tol(s21_sqrt(0.0), sqrt(0.0), 1e-6);
ck_assert_ldouble_eq_tol(s21_sqrt(-0.0), sqrt(-0.0), 1e-6);

#test SQRT9
ck_assert_ldouble_eq_tol(s21_sqrt(10e+16), sqrt(10e+16), 1e-6);

#test SQRT10
ck_assert_ldouble_eq_tol(s21_sqrt(1), sqrt(1), 1e-6);

#test SQRT11
ck_assert_ldouble_eq_tol(s21_sqrt(100), sqrt(100), 1e-6);

#test SQRT12
ck_assert_ldouble_eq_tol(s21_sqrt(98765432.123), sqrt(98765432.123), 1e-6);

#test SQRT13
ck_assert_ldouble_eq_tol(s21_sqrt(981.123e6), sqrt(981.123e6), 1e-6);

#test SQRT14
ck_assert_ldouble_eq_tol(s21_sqrt(981.123e-15), sqrt(981.123e-15), 1e-6);

// --------------EXP---------------------------EXP-------------------------EXP---------------------EXP---
#test EXP0
double x = 0;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP1
double x = 1;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP2
double x = 2;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP3
double x = 3;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP4
double x = 1.5;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP5
double x = -1.5;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP6
double x = 0.5;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP7
double x = -0.5;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP8
double x = 715;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP9
double x = -715;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP10
double x = -0;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP11
double x = 'A';
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP12
double x = -'N';
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP13
double x = -'V';
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP14
double x = +'B';
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP15
double x = 0 / 1;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP16
double x = 0 / 1;
ck_assert_int_eq(s21_exp(x), exp(x));

#test EXP17
ck_assert_float_eq(s21_exp(2), exp(2));

#test EXP18
ck_assert_float_eq(s21_exp(-750), exp(-750));

#test EXP19
ck_assert_float_eq(s21_exp(-2), exp(-2));

#test EXP20
double num = NAN;
long double orig_res = exp(num), our_res = s21_exp(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test EXP21
double num = INFINITY;
long double orig_res = exp(num), our_res = s21_exp(num);
int suc = 0;
if (isinf(orig_res) && isinf(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test EXP22
double num = -INFINITY;
long double orig_res = exp(num), our_res = s21_exp(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test EXP23
double x = 0.0;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP24
ck_assert_ldouble_eq_tol(s21_exp(-INFINITY), expl(-INFINITY), 1e-06);

#test EXP25
ck_assert_ldouble_infinite(s21_exp(INFINITY));
ck_assert_ldouble_infinite(expl(INFINITY));

#test EXP26
ck_assert_ldouble_nan(s21_exp(NAN));
ck_assert_ldouble_nan(expl(NAN));

#test EXP27
double x = 0.0;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP28
double x = -1.0;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP29
double x = -100;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP30
double x = -1000000;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP31
double x = 1;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP32
double x = 1;
ck_assert_ldouble_eq_tol(s21_exp(x), expl(x), 1e-06);

#test EXP33
double num = 1000000;
long double orig_res = exp(num), our_res = s21_exp(num);
int suc = 0;
if (isinf(orig_res) && isinf(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

// ------------ASIN----------------------ASIN-------------------ASIN--------------------ASIN-----------------------ASIN
#test ASIN0
double num = 0.55;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN1
double num = -0.99;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN2
double num = -9;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN3
double num = INFINITY;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN4
double num = -INFINITY;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN5
double num = NAN;
long double orig_res = asin(num), our_res = s21_asin(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ASIN6
ck_assert_ldouble_nan(s21_asin(INFINITY));
ck_assert_ldouble_nan(asin(INFINITY));

#test ASIN7
ck_assert_ldouble_nan(s21_asin(-INFINITY));
ck_assert_ldouble_nan(asin(-INFINITY));

#test ASIN8
ck_assert_ldouble_nan(s21_asin(NAN));
ck_assert_ldouble_nan(asin(NAN));

#test ASIN9
ck_assert_ldouble_eq_tol(s21_asin(1.0), asin(1.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_asin(-1.0), asin(-1.0), S21_EPS);

#test ASIN10
ck_assert_ldouble_eq_tol(s21_asin(0.0), asin(0.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_asin(-0.0), asin(-0.0), S21_EPS);

#test ASIN11
ck_assert_ldouble_eq_tol(s21_asin(0.0), asin(0.0), S21_EPS);

#test ASIN12
ck_assert_ldouble_eq_tol(s21_asin(-1), asin(-1), S21_EPS);

#test ASIN13
ck_assert_ldouble_eq_tol(s21_asin(1), asin(1), S21_EPS);

#test ASIN14
ck_assert_ldouble_eq_tol(s21_asin(-sqrt(3) / 2), asin(-sqrt(3) / 2), S21_EPS);

#test ASIN15
ck_assert_ldouble_eq_tol(s21_asin(-sqrt(2) / 2), asin(-sqrt(2) / 2), S21_EPS);

#test ASIN16
ck_assert_ldouble_eq_tol(s21_asin(-1 / 2), asin(-1 / 2), S21_EPS);

#test ASIN17
ck_assert_ldouble_eq_tol(s21_asin(1 / 2), asin(1 / 2), S21_EPS);

#test ASIN18
ck_assert_ldouble_eq_tol(s21_asin(sqrt(2) / 2), asin(sqrt(2) / 2), S21_EPS);

#test ASIN19
ck_assert_ldouble_eq_tol(s21_asin(sqrt(3) / 2), asin(sqrt(3) / 2), S21_EPS);

// // -----ACOS-----------------------ACOS----------------------ACOS--------------------ACOS-----------------ACOS-------------------ACOS
#test ACOS0
double num = 0.55;
long double orig_res = acos(num), our_res = s21_acos(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS1
double num = -0.99;
long double orig_res = acos(num), our_res = s21_acos(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS2
double num = -9;
long double orig_res = acos(num), our_res = s21_acos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS3
double num = INFINITY;
long double orig_res = acos(num), our_res = s21_acos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS4
double num = -INFINITY;
long double orig_res = acos(num), our_res = s21_acos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS5
double num = NAN;
long double orig_res = s21_acos(num), our_res = acos(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ACOS6
ck_assert_ldouble_nan(s21_acos(NAN));
ck_assert_ldouble_nan(acos(NAN));

#test ACOS7
ck_assert_ldouble_nan(s21_acos(NAN));
ck_assert_ldouble_nan(acos(NAN));

#test ACOS8
ck_assert_ldouble_eq_tol(s21_acos(1.0), acos(1.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_acos(-1.0), acos(-1.0), S21_EPS);

#test ACOS9
ck_assert_ldouble_eq_tol(s21_acos(0.0), acos(0.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_acos(-0.0), acos(-0.0), S21_EPS);

#test ACOS10
ck_assert_ldouble_eq_tol(s21_acos(-1), acos(-1), S21_EPS);

#test ACOS11
ck_assert_ldouble_eq_tol(s21_acos(1), acos(1), S21_EPS);

#test ACOS12
ck_assert_ldouble_eq_tol(s21_acos(-sqrt(3) / 2), acos(-sqrt(3) / 2), S21_EPS);

#test ACOS13
ck_assert_ldouble_eq_tol(s21_acos(-sqrt(2) / 2), acos(-sqrt(2) / 2), S21_EPS);

#test ACOS14
ck_assert_ldouble_eq_tol(s21_acos(-1 / 2), acos(-1 / 2), S21_EPS);

#test ACOS15
ck_assert_ldouble_eq_tol(s21_acos(1 / 2), acos(1 / 2), S21_EPS);

#test ACOS16
ck_assert_ldouble_eq_tol(s21_acos(2 / 2), acos(2 / 2), S21_EPS);

#test ACOS17
ck_assert_ldouble_eq_tol(s21_acos(sqrt(2) / 2), acos(sqrt(2) / 2), S21_EPS);

#test ACOS18
ck_assert_ldouble_eq_tol(s21_acos(sqrt(3) / 2), acos(sqrt(3) / 2), S21_EPS);

// // -------ATAN---------------------ATAN----------------------ATAN--------------------ATAN--------------------------------ATAN
#test ATAN1
double num = -0.99;
long double orig_res = s21_atan(num), our_res = atan(num);
int suc = 0;
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test ATAN2
// printf("%Lf\n\n", s21_atan(-15.01));
// printf("%Lf\n\n", atan(-15.01));
ck_assert_float_eq(s21_atan(-15.01), atan(-15.01));

#test ATAN3
ck_assert_float_eq(-9999999999, -9999999999);

#test ATAN4
ck_assert_ldouble_eq(s21_atan(INFINITY), atan(INFINITY));
ck_assert_ldouble_eq(s21_atan(-INFINITY), atan(-INFINITY));

#test ATAN5
double num = NAN;
long double orig_res = s21_atan(num), our_res = atan(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test ATAN6
ck_assert_ldouble_eq_tol(s21_atan(INFINITY), (M_PI / 2.0), S21_EPS);
ck_assert_ldouble_eq_tol(atan(INFINITY), (M_PI / 2.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_atan((-INFINITY)), ((M_PI) / -2.0), S21_EPS);
ck_assert_ldouble_eq_tol(atan(-INFINITY), ((M_PI) / -2.0), S21_EPS);

#test ATAN7
ck_assert_ldouble_nan(s21_atan(NAN));
ck_assert_ldouble_nan(atan(NAN));

#test ATAN8
ck_assert_ldouble_eq_tol(s21_atan(1.0), atan(1.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_atan(1.1), atan(1.1), S21_EPS);
ck_assert_ldouble_eq_tol(s21_atan(-1.0), atan(-1.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_atan(-1.1), atan(-1.1), S21_EPS);

#test ATAN9
ck_assert_ldouble_eq_tol(s21_atan(0.0), atan(0.0), S21_EPS);
ck_assert_ldouble_eq_tol(s21_atan(-0.0), atan(-0.0), S21_EPS);

#test ATAN10
ck_assert_ldouble_eq_tol(s21_atan(-1), atan(-1), S21_EPS);

#test ATAN11
ck_assert_ldouble_eq_tol(s21_atan(-sqrt(3) / 2), atan(-sqrt(3) / 2), S21_EPS);

#test ATAN12
ck_assert_ldouble_eq_tol(s21_atan(-sqrt(2) / 2), atan(-sqrt(2) / 2), S21_EPS);

#test ATAN13
ck_assert_ldouble_eq_tol(s21_atan(-1 / 2), atan(-1 / 2), S21_EPS);

#test ATAN14
ck_assert_ldouble_eq_tol(s21_atan(1 / 2), atan(1 / 2), S21_EPS);

#test ATAN15
ck_assert_ldouble_eq_tol(s21_atan(2 / 2), atan(2 / 2), S21_EPS);

#test ATAN16
ck_assert_ldouble_eq_tol(s21_atan(sqrt(3) / 2), atan(sqrt(3) / 2), S21_EPS);

#test ATAN17
ck_assert_ldouble_eq_tol(s21_atan(1), atan(1), S21_EPS);

#test ATAN18
ck_assert_ldouble_eq_tol(s21_atan(1.23456e-7), atan(1.23456e-7), S21_EPS);

#test ATAN19
ck_assert_ldouble_eq_tol(s21_atan(2.1234567), atan(2.1234567), S21_EPS);

#test ATAN20
ck_assert_ldouble_eq_tol(s21_atan(2.1234567e-7), atan(2.1234567e-7), S21_EPS);

#test ATAN21
ck_assert_ldouble_eq_tol(s21_atan(2.1234567e-16), atan(2.1234567e-16),
S21_EPS);

#test ATAN22
ck_assert_float_nan(s21_atan(S21_NAN));

#test ATAN23
ck_assert_ldouble_eq_tol(s21_atan(S21_PI / 2), atan(S21_PI / 2), S21_EPS);

#test ATAN24
ck_assert_ldouble_eq_tol(s21_atan(-S21_PI / 2), atan(-S21_PI / 2), S21_EPS);

// // ------CEIL-------------------CEIL----------------------CEIL---------------------CEIL-----------------------CEIL
#test CEIL0
ck_assert_ldouble_eq(s21_ceil(-15.01), ceil(-15.01));

#test CEIL1
ck_assert_ldouble_eq(s21_ceil(15.01), ceil(15.01));

#test CEIL2
ck_assert_ldouble_eq(s21_ceil(INFINITY), ceil(INFINITY));

#test CEIL3
ck_assert_ldouble_eq(s21_ceil(-INFINITY), ceil(-INFINITY));

#test CEIL4
ck_assert_ldouble_eq(s21_ceil(-0.12), ceil(-0.12));

#test CEIL5
double num = NAN;
long double orig_res = ceil(num), our_res = s21_ceil(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test CEIL6
ck_assert_ldouble_infinite(s21_ceil(INFINITY));
ck_assert_ldouble_infinite(ceil(INFINITY));

#test CEIL7
ck_assert_ldouble_nan(s21_ceil(NAN));
ck_assert_ldouble_nan(ceil(NAN));

#test CEIL8
ck_assert_ldouble_eq(s21_ceil(0), ceil(0));

#test CEIL9
ck_assert_ldouble_eq(s21_ceil(0.0), ceil(0.0));

#test CEIL10
ck_assert_ldouble_eq(s21_ceil(21.21), ceil(21.21));

#test CEIL11
ck_assert_ldouble_eq(s21_ceil(21.91), ceil(21.91));

#test CEIL12
ck_assert_ldouble_eq(s21_ceil(-21.21), ceil(-21.21));

#test CEIL13
ck_assert_ldouble_eq(s21_ceil(-21.91), ceil(-21.91));

#test CEIL14
if (s21_ceil(__DBL_MAX__) == ceil(__DBL_MAX__)) {
}

ck_assert_ldouble_eq(s21_ceil(__DBL_MAX__), ceil(__DBL_MAX__));

// // -----FLOOR---------------------FLOOR-----------------------FLOOR---------------------FLOOR----------------------FLOOR
#test FLOOR0
ck_assert_ldouble_eq(s21_floor(0.0), floor(0.0));

#test FLOOR1
ck_assert_ldouble_eq(s21_floor(21.21), floor(21.21));

#test FLOOR2
ck_assert_ldouble_eq(s21_floor(21.91), floor(21.91));

#test FLOOR3
ck_assert_ldouble_eq(s21_floor(-21.21), floor(-21.21));

#test FLOOR4
ck_assert_ldouble_eq(s21_floor(-21.91), floor(-21.91));

#test FLOOR5
ck_assert_ldouble_infinite(s21_floor(INFINITY));
ck_assert_ldouble_infinite(floor(INFINITY));

#test FLOOR6
ck_assert_ldouble_nan(s21_floor(NAN));
ck_assert_ldouble_nan(floor(NAN));

#test FLOOR7
ck_assert_ldouble_eq(s21_floor(0), floor(0));

#test FLOOR8
ck_assert_ldouble_eq(s21_floor(-15.01), floor(-15.01));

#test FLOOR9
ck_assert_ldouble_eq(s21_floor(15.01), floor(15.01));

#test FLOOR10
ck_assert_ldouble_eq(s21_floor(INFINITY), floor(INFINITY));

#test FLOOR11
ck_assert_ldouble_eq(s21_floor(-INFINITY), floor(-INFINITY));

#test FLOOR12
double num = NAN;
long double orig_res = floor(num), our_res = s21_floor(num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test FLOOR13
ck_assert_ldouble_eq(s21_floor(-0), floor(-0));

// // ------FMOD---------------------FMOD----------------------FMOD----------------------FMOD----------------------FMOD
#test FMOD0
ck_assert_ldouble_eq(s21_fmod(2.34, 2.0), fmod(2.34, 2.0));

#test FMOD1
ck_assert_ldouble_eq(s21_fmod(-2.34, 2.0), fmod(-2.34, 2.0));

#test FMOD2
ck_assert_ldouble_eq(s21_fmod(2.34, -2.0), fmod(2.34, -2.0));

#test FMOD3
ck_assert_ldouble_eq(s21_fmod(-2.34, -2.0), fmod(-2.34, -2.0));

#test FMOD4
ck_assert_ldouble_eq(s21_fmod(21.21, 3), fmod(21.21, 3));

#test FMOD5
ck_assert_ldouble_eq(s21_fmod(3, 21.21), fmod(3, 21.21));

#test FMOD6
ck_assert_ldouble_eq(s21_fmod(-21.21, 3), fmod(-21.21, 3));

#test FMOD7
ck_assert_ldouble_eq(s21_fmod(3, -21.21), fmod(3, -21.21));

#test FMOD8
ck_assert_ldouble_eq(s21_fmod(100500, 9), fmod(100500, 9));

#test FMOD9
ck_assert_ldouble_eq(s21_fmod(-100500, -9), fmod(-100500, -9));

#test FMOD10
ck_assert_ldouble_eq(s21_fmod(-9, -100500), fmod(-9, -100500));

#test FMOD11
ck_assert_ldouble_eq(s21_fmod(-9, -9), fmod(-9, -9));

#test FMOD12
ck_assert_ldouble_eq(s21_fmod(10, 5), fmod(10, 5));

#test FMOD13
ck_assert_ldouble_nan(s21_fmod(INFINITY, INFINITY));
ck_assert_ldouble_nan(fmod(INFINITY, INFINITY));

#test FMOD14
ck_assert_ldouble_nan(s21_fmod(NAN, NAN));
ck_assert_ldouble_nan(fmod(NAN, NAN));

#test FMOD15
ck_assert_ldouble_nan(s21_fmod(2.45, 0));
ck_assert_ldouble_nan(fmod(2.45, 0));

#test FMOD16
ck_assert_ldouble_nan(s21_fmod(0, 0));
ck_assert_ldouble_nan(fmod(0, 0));

#test FMOD17
ck_assert_ldouble_nan(s21_fmod(INFINITY, 0));
ck_assert_ldouble_nan(fmod(INFINITY, 0));

#test FMOD18
double num = NAN;
long double orig_res = fmod(num, 2.0), our_res = s21_fmod(num, 2.0);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test FMOD19
double num = NAN;
long double orig_res = fmod(2.0, num), our_res = s21_fmod(2.0, num);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test FMOD20
ck_assert_ldouble_eq(s21_fmod(2.0, INFINITY), fmod(2.0, INFINITY));

#test FMOD21
double num = INFINITY;
long double orig_res = fmod(num, 2.0), our_res = s21_fmod(num, 2.0);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test FMOD22
ck_assert_ldouble_eq(s21_fmod(2.0, INFINITY), fmod(2.0, INFINITY));

#test FMOD23
ck_assert_ldouble_eq(s21_fmod(2.0, -INFINITY), fmod(2.0, -INFINITY));

#test FMOD24
double num = -INFINITY;
long double orig_res = fmod(num, 2.0), our_res = s21_fmod(num, 2.0);
int suc = 0;
if (isnan(orig_res) && isnan(our_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test FMOD25
ck_assert_ldouble_nan(s21_fmod(S21_INF, S21_INF));
ck_assert_ldouble_nan(fmod(S21_INF, S21_INF));

#test FMOD26
ck_assert_ldouble_eq(s21_fmod(0, 23), fmod(0, 23));

// // -------POW------------------------POW--------------------POW----------------------POW------------------POW--------------POW
#test POW0
double num = 456.789;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
ck_assert_float_eq(our_res, orig_res);
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW1
double num = INFINITY;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isinf(our_res) && isinf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW2
double num = NAN;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isnan(our_res) && isnan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW3
double num = NAN;
double ex = NAN;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isnan(our_res) && isnan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW4
double num = 0.001;
double ex = NAN;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isnan(our_res) && isnan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW5
double num = INFINITY;
double ex = INFINITY;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isinf(our_res) && isinf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW6
double num = INFINITY;
double ex = INFINITY;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (isinf(our_res) && isinf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW7
long double base = -16.161435;
long double exp = 9.;
ck_assert_double_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW8
long double base = -10.1261;
long double exp = -0.72;
ck_assert_double_nan(s21_pow(base, exp));
ck_assert_double_nan(pow(base, exp));

#test POW9
long double base = +0;
long double exp = -0.33;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW10
long double base = -0;
long double exp = -0.33;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW11
long double base = -0;
long double exp = S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), S21_EPS);

#test POW12
long double base = +0;
long double exp = 123;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW13
long double base = -0;
long double exp = 123;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW14
long double base = -0;
long double exp = S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW15
long double base = -1;
long double exp = S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW16
long double base = -1;
long double exp = S21_NAN;
ck_assert_double_nan(pow(base, exp));
ck_assert_double_nan(s21_pow(base, exp));

#test POW17
long double base = S21_NAN;
long double exp = 0;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW18
long double base = -123;
long double exp = S21_NAN;
ck_assert_double_nan(s21_pow(base, exp));
ck_assert_double_nan(pow(base, exp));

#test POW19
long double base = 0.5591951;
long double exp = -S21_INF;
ck_assert_ldouble_infinite(pow(base, exp));
ck_assert_ldouble_infinite(s21_pow(base, exp));

#test POW20
long double base = 1.5591951;
long double exp = -S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW21
long double base = 0.5591951;
long double exp = S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW22
long double base = 1.5591951;
long double exp = S21_INF;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW23
long double base = -S21_INF;
long double exp = -193491;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW24
long double base = -S21_INF;
long double exp = -142;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW25
long double base = -S21_INF;
long double exp = 141;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW26
long double base = -S21_INF;
long double exp = 142;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW27
long double base = S21_INF;
long double exp = -1;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test POW28
long double base = S21_INF;
long double exp = 1;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test POW29
ck_assert_ldouble_eq_tol(s21_pow(0.0, 0.0), pow(0.0, 0.0), 1e-6);

#test POW30
ck_assert_ldouble_eq_tol(s21_pow(-1, 4), pow(-1, 4), 1e-6);

#test POW31
ck_assert_ldouble_eq_tol(s21_pow(2, 18), pow(2, 18), 1e-6);

#test POW32
ck_assert_ldouble_eq_tol(s21_pow(2.1, 11), pow(2.1, 11), 1e-6);

#test POW33
ck_assert_ldouble_eq_tol(s21_pow(1.23456e-7, 2.21), pow(1.23456e-7, 2.21),
1e-6);

#test POW34
ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);

#test POW35
ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);

#test POW36
long double orig_res = pow(2.1234567e-7, -2.45e4),
our_res = s21_pow(2.1234567e-7, -2.45e4);
int suc = 0;
if (isinf(our_res) && isinf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test POW37
ck_assert_ldouble_eq_tol(s21_pow(9.99999999e3, 9.95e-4),
pow(9.99999999e3, 9.95e-4), 1e-6);

#test POW38
long double exp = -12;
ck_assert_ldouble_infinite(s21_pow(+0, exp));
ck_assert_ldouble_infinite(pow(+0, exp));

#test POW39
long double exp = -12;
ck_assert_ldouble_infinite(s21_pow(-0, exp));
ck_assert_ldouble_infinite(pow(-0, exp));

#test POW40
long double exp = 0;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test POW41
long double exp = S21_NAN;
ck_assert_double_nan(s21_pow(+0, exp));
ck_assert_double_nan(pow(+0, exp));

#test POW42
long double exp = 2.456;
ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test POW43
long double exp = -S21_INF;
ck_assert_ldouble_infinite(s21_pow(+0, exp));
ck_assert_ldouble_infinite(pow(+0, exp));

#test POW44
long double exp = 56;
ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test POW45
long double exp = 56;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test POW46
long double exp = 56.345;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test POW47
long double exp = S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(-1, exp), pow(-1, exp), 1e-6);

#test POW48
long double exp = -S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(-1, exp), pow(-1, exp), 1e-6);

#test POW49
long double exp = S21_NAN;
ck_assert_ldouble_eq_tol(s21_pow(+1, exp), pow(+1, exp), 1e-6);

#test POW50
long double exp = -0;
ck_assert_ldouble_eq_tol(s21_pow(4567, exp), pow(4567, exp), 1e-6);

#test POW51
long double exp = +0;
ck_assert_ldouble_eq_tol(s21_pow(34567, exp), pow(34567, exp), 1e-6);

#test POW52
long double exp = -0;
ck_assert_ldouble_eq_tol(s21_pow(S21_NAN, exp), pow(S21_NAN, exp), 1e-6);

#test POW53
long double exp = +0;
ck_assert_ldouble_eq_tol(s21_pow(S21_NAN, exp), pow(S21_NAN, exp), 1e-6);

#test POW54
long double exp = S21_NAN;
ck_assert_double_nan(s21_pow(S21_NAN, exp));
ck_assert_double_nan(pow(S21_NAN, exp));

#test POW55
long double exp = S21_INF;
ck_assert_ldouble_infinite(s21_pow(S21_INF, exp));
ck_assert_ldouble_infinite(pow(S21_INF, exp));

#test POW56
long double exp = -S21_INF;
ck_assert_ldouble_eq_tol(s21_pow(-S21_INF, exp), pow(-S21_INF, exp), 1e-6);

#test POW57
double exp = S21_INF;
ck_assert_ldouble_infinite(s21_pow(-S21_INF, exp));
ck_assert_ldouble_infinite(pow(-S21_INF, exp));

#test POW58
double exp;
double res1;
long double res2;

for (exp = 0.0; exp > -1000; exp -= 0.1) {
res1 = pow(S21_INF, exp);
res2 = s21_pow(S21_INF, exp);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test POW59
double base;
double res1;
long double res2;

for (base = 0.0; base < 10; base += 0.1) {
res1 = pow(base, S21_INF);
res2 = s21_pow(base, S21_INF);
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test POW60
double base;
double res1;
long double res2;

for (base = 0.0; base > -10; base -= 0.1) {
res1 = pow(base, S21_INF);
res2 = s21_pow(base, S21_INF);
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test POW61
long double base;
long double res1;
long double res2;

for (base = 0.0; base < 10; base += 0.1) {
res1 = pow(base, -S21_INF);
res2 = s21_pow(base, -S21_INF);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test POW62
long double base;
long double res1;
long double res2;

for (base = 0.0; base > -10; base -= 0.1) {
res1 = pow(base, -S21_INF);
res2 = s21_pow(base, -S21_INF);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test POW63
double exp;
double res1;
long double res2;

for (exp = 0.0; exp > -10; exp -= 0.1) {
if (fmod(exp, 2) != 0) {
res1 = pow(-S21_INF, exp);
res2 = s21_pow(-S21_INF, exp);
}
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test POW64
double exp;
double res1;
long double res2;

for (exp = 0.0; exp > -10; exp -= 0.1) {
if (fmod(exp, 2) == 0) {
res1 = pow(-S21_INF, exp);
res2 = s21_pow(-S21_INF, exp);
}
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test POW65
double exp;
double res1;
long double res2;

for (exp = 0.0; exp < 10; exp += 0.1) {
if (fmod(exp, 2) != 0) {
res1 = pow(-S21_INF, exp);
res2 = s21_pow(-S21_INF, exp);
}
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test POW66
double exp;
double res1;
long double res2;

for (exp = 0.0; exp < 10; exp += 0.1) {
if (fmod(exp, 2) == 0) {
res1 = pow(-S21_INF, exp);
res2 = s21_pow(-S21_INF, exp);
}
}
ck_assert_ldouble_eq_tol(res2, res1, 1e-6);

#test POW67
long double exp = 3;
ck_assert_ldouble_eq_tol(s21_pow(-3, exp), pow(-3, exp), 1e-6);

#test POW68
long double exp = -3;
ck_assert_ldouble_eq_tol(s21_pow(-3, exp), pow(-3, exp), 1e-6);

#test POW69
long double exp = -3;
ck_assert_ldouble_eq_tol(s21_pow(3, exp), pow(3, exp), 1e-6);

#test POW70
long double exp = 3;
ck_assert_ldouble_eq_tol(s21_pow(3, exp), pow(3, exp), 1e-6);

#test POW71
long double base = -0;
long double exp = S21_INF;
long double res = pow(base, exp);
long double res1 = s21_pow(base, exp);
ck_assert_ldouble_eq_tol(res, res1, 1e-6);

#test POW72
long double exp;
long double base = -0;
long double res;
long double res1;
for (exp = 0.0; exp < 10; exp += 0.1) {
if (fmod(exp, 2) != 0) {
res = pow(base, exp);
res1 = s21_pow(base, exp);
}
}
ck_assert_ldouble_eq_tol(res, res1, 1e-6);

